{
  "awful": {
    "prefix": "awful",
    "body": ["local Unlocker,  awful, ${1:project} = ..."],
    "description": "Define Awful"
  },

  "awful.time": {
    "prefix": "awful.time",
    "body": ["awful.time"],
    "description": "current time in seconds, equal to GetTime(), but only updated when awful framework ticks."
  },

  "awful.buffer": {
    "prefix": "awful.buffer",
    "body": ["awful.buffer"],
    "description": "a combination of dynamic values which is roughly equal to the time it should take for what's displayed on your client to reach the servers, plus 1 tick of buffer for your script to react before it's too late, and 30ms to account for any latency jitter: \nbuffer = latency + tickRate + jitter"
  },

  "awful.latency": {
    "prefix": "awful.latency",
    "body": ["awful.latency"],
    "description": "Your latency to the game server, averaged out over the last 30 seconds, with HTTP overhead accounted for."
  },

  "awful.tickRate": {
    "prefix": ["awful.tickRate", "tickRate"],
    "body": ["awful.tickRate"],
    "description": "the time between each tick of the awful framework"
  },

  "awful.spellCastBuffer": {
    "prefix": "awful.spellCastBuffer",
    "body": ["awful.spellCastBuffer"],
    "description": "The Spell Queue Window duration set by awful"
  },

  "awful.gcd": {
    "prefix": ["awful.gcd", "gcd"],
    "body": ["awful.gcd"],
    "description": "The total expected GCD duration per general 1.5s GCD incurring spell cast"
  },

  "awful.hasControl": {
    "prefix": ["awful.hasControl", "hasControl"],
    "body": ["awful.hasControl"],
    "description": "Returns true if the player has control of their character"
  },

  "awful.zone": {
    "prefix": ["awful.zone", "zone"],
    "body": ["awful.zone"],
    "description": "Returns the current zone name"
  },

  "awful.mapID": {
    "prefix": ["awful.mapID", "mapID"],
    "body": ["awful.mapID"],
    "description": "Returns the current map ID"
  },

  "awful.powerTypes": {
    "prefix": ["awful.powerTypes", "powerTypes"],
    "body": ["awful.powerTypes"],
    "description": "Returns a table of power types"
  },

  "SELECT/awful.powerTypes": {
    "prefix": ["awful.powerTypes", "powerTypes"],
    "body": [
      "awful.powerTypes[\"${1|mana,rage,focus,energy,combopoints,cp,runes,runicpower,soulshards,shards,astralpower,ap, lunarpower,holypower,alternatepower,maelstrom,chi,insantiy,arcanecharges,fury,pain,essence|}\"]"
    ],
    "description": "Selects a Power Type from the Power Types table"
  },

  "awful.onTick": {
    "prefix": ["awful.onTick", "onTick"],
    "body": ["awful.onTick(function()", "  ${1:-- do something}", "end)"],
    "description": "Adds a callback function to the main framework ticker. These are called in the order added, just before the routine actor."
  },

  "awful.onUpdate": {
    "prefix": ["awful.onUpdate", "onUpdate"],
    "body": ["awful.onUpdate(function()", " ${1:-- do something}", "end)"],
    "description": "Adds a callback function to the main framework ticker. These are called in the order added, just before the routine actor."
  },

  "awful.onEvent": {
    "prefix": ["awful.onEvent", "onEvent"],
    "body": [
      "awful.onEvent(function()",
      " ${2:-- do something}",
      "end, \"${1:EVENT}\")"
    ],
    "description": "Adds a callback function to the main framework ticker. These are called in the order added, just before the routine actor."
  },

  "awful.bin": {
    "prefix": ["awful.bin", "bin"],
    "body": ["awful.bin"],
    "description": "Converts value of given expression / variable into binary."
  },

  "awful.controlMovement": {
    "prefix": "awful.controlMovement",
    "body": ["awful.controlMovement(${1:duration}, ${2:facing})"],
    "description": "Controls the movement of the player. 0 = stop, 1 = forward, 2 = backward, 3 = strafe left, 4 = strafe right, 5 = forward + strafe left, 6 = forward + strafe right, 7 = backward + strafe left, 8 = backward + strafe right"
  },

  "awful.StopMoving": {
    "prefix": ["awful.StopMoving", "StopMoving"],
    "body": ["awful.StopMoving()"],
    "description": "Immediately stops the player from moving, as long as they're not in the air."
  },

  "awful.Populate": {
    "prefix": ["awful.Populate", "populate"],
    "body": ["awful.Populate(\"${1:array}\", ${2:namespace})"],
    "description": "Creates a reference to each entry within given associative array (Param 1) inside of all other given tables, namespaces, scopes, etc. as well (Params 2 - N)"
  },

  "awful.pullTimer": {
    "prefix": ["awful.pullTimer", "pullTimer"],
    "body": ["${1|awful.pullTimer : 0,awful.pullBradsWilly|}"],
    "description": "Creates a reference to a pull timer that has been used by things like DBM or BigWigs. Defaults to 0 if no pull timer."
  },

  // Alerts and Visuals
  "awful.alert": {
    "prefix": ["awful.alert", "alert"],
    "body": [
      "awful.alert({",
      "  message = \"${1:Message}\",",
      "  texture = ${2:texture},",
      "  duration = ${3:5},",
      "  bgColor = {${4:255, 255, 255, 255}},",
      "})"
    ],
    "description": "Creates an alert on the screen"
  },

  "ERROR/awful.alert": {
    "prefix": "errorAlert",
    "body": [
      "awful.alert({message = \"${1:Message}\", texture = 134337, duration = 5, bgColor = {153, 29, 31, 255}})"
    ],
    "description": "Creates an error alert on the screen"
  },

  "awful.textureEscape": {
    "prefix": ["awful.textureEscape", "textureEscape"],
    "body": ["awful.textureEscape(${1:texture}, ${2:px}, \"${3:x:y}\")"]
  },

  "awful.Draw": {
    "prefix": ["awful.Draw"],
    "body": [
      "local Draw = awful.draw",
      "Draw(function(draw)",
      "  ${1:-- do something}",
      "end)"
    ],
    "description": "Draws various things in game. See the documentation for more information."
  },

  "DRAW_ELEMENT/SetDrawWidth": {
    "prefix": ["draw:SetWidth", "SetWidth"],
    "body": ["draw:SetWidth(${1:width})"],
    "description": "Sets the width of the element"
  },

  "DRAW_ELEMENT/SetDrawColor": {
    "prefix": ["draw:SetColor", "SetColor"],
    "body": ["draw:SetColor(${1:0}, ${2:0}, ${3:0}, ${4:255})"],
    "description": "Sets the color of the element"
  },

  "DRAW_ELEMENT/DrawLine": {
    "prefix": ["draw:Line", "Line"],
    // (x1, y1, z1, x2, y2, z2, maxDistance)
    "body": "draw:Line(${1:x}, ${2:y}, ${3:z}, ${4:x2}, ${5:y2}, ${6:z2}, ${7:maxDistance})",
    "description": "Draws a line between two points"
  },

  "DRAW_ELEMENT/DrawCircle": {
    "prefix": ["draw:Circle", "Circle"],
    // (x, y, z, radius, steps)
    "body": "draw:Circle(${1:x}, ${2:y}, ${3:z}, ${4:radius}, ${5:steps})",
    "description": "Draws a circle around the coordinate given"
  },

  "DRAW_ELEMENT/DrawArc": {
    "prefix": ["draw:Arc", "Arc"],
    // (x, y, z, size, arc, rotation)
    "body": "draw:Arc(${1:x}, ${2:y}, ${3:z}, ${4:size}, ${5:arc}, ${6:rotation})",
    "description": "Draws an arc around the coordinate given"
  },

  "DRAW_ELEMENT/DrawRect": {
    "prefix": ["draw:Rect", "Rect"],
    // (x, y, z, width, length, rotation)
    "body": "draw:Rect(${1:x}, ${2:y}, ${3:z}, ${4:width}, ${5:length}, ${6:rotation})",
    "description": "Draws a rectangle around the coordinate given"
  },

  "DRAW_ELEMENT/Outline": {
    "prefix": ["draw:Outline", "Outline"],
    // (x, y, z, radius)
    "body": "draw:Outline(${1:x}, ${2:y}, ${3:z}, ${4:radius})",
    "description": "Draws a circle witha thick border around the coordinate given"
  },

  "DRAW_ELEMENT/FilledCircle": {
    "prefix": ["draw:FilledCircle", "FilledCircle"],
    // (x, y, z, radius, steps)
    "body": "draw:FilledCircle(${1:x}, ${2:y}, ${3:z}, ${4:radius}, ${5:steps})",
    "description": "Draws a filled circle around the coordinate given"
  },

  "DRAW_ELEMENT/Triangle": {
    "prefix": ["draw:Triangle", "Triangle"],
    // (x, y, z, v1, v2, v3, cull, wireframe)
    "body": "draw:Triangle(${1:x}, ${2:y}, ${3:z}, ${4:v1}, ${5:v2}, ${6:v3}, ${7:cull}, ${8:wireframe})",
    "description": "Draws a triangle on the coordinate given"
  },

  "DRAW_ELEMENT/Text": {
    "prefix": ["draw:Text", "Text"],
    // (string, font, x, y, z)
    "body": "draw:Text(\"${1:string}\", ${2:font}, ${3:x}, ${4:y}, ${5:z})",
    "description": "Draws text on the coordinate given"
  },

  "DRAW_ELEMENT/Texture": {
    "prefix": ["draw:Texture", "Texture"],
    // (config, x, y, z, alpha)
    "body": "draw:Texture({ ${1:Texture}, ${2:width}, ${3:height} }, ${4:x}, ${5:y}, ${6:z}, ${7:alpha})",
    "description": "Draws a texture on the coordinate given"
  },

  // Navigation PLACEHOLDER

  // Awful UI
  "awful.UI": {
    "prefix": ["awful.UI", "UI"],
    "body": [
      "local gui, settings, cmd = awful.UI:New(\"${1:command}\", {",
      "  title = \"${2:Title}\",",
      "  show = ${3:true},",
      "  colors = {",
      "    title = {${4:0, 0, 0, 255}},",
      "    primary = {${5:255, 255, 255, 255}},",
      "    accent = {${6:255, 255, 255, 255}},",
      "    background = {${7:0, 0, 0, 255}},",
      "  },",
      "})"
    ],
    "description": "Creates a UI element"
  },

  "Commad": {
    "prefix": ["cmd", "Command"],
    "body": [
      "cmd:new(function(msg)",
      "  if msg == \"${1:command}\" then",
      "    ${2:-- do something}",
      "    return true",
      "  end",
      "end)"
    ],
    "description": "Creates a command"
  },

  "GUI_ELEMENT/UITab": {
    "prefix": ["gui:Tab", "Tab"],
    "body": ["gui:Tab(\"${1:Tab}\")"],
    "description": "Creates a tab in the GUI"
  },

  "GUI_ELEMENT/checkbox": {
    "prefix": ["checkbox"],
    "body": [
      "${1:tab}:Checkbox({",
      "  text = \"${2:Text}\",",
      "  var = \"${3:variable}\",",
      "  default = ${4:true},",
      "  tooltip = \"${5:Tooltip}\",",
      "})"
    ],
    "description": "Creates a checkbox"
  },

  "GUI_ELEMENT/text": {
    "prefix": "text",
    "body": [
      "${1:tab}:Text({",
      "  text = \"${2:Text}\",",
      "  size = ${3:size},",
      "})"
    ],
    "description": "Creates a text element"
  },
  "GUI_ELEMENT/header": {
		"prefix": [
			"guiheader",
			"header",
		],
		"body": [
			"${1:var}:Text({ text = awful.textureEscape(${2:id}, ${3:14}) ..  '${4:text}', header = true})",
		],
		"description": "Creates a Header"
	},
  "GUI_ELEMENT/Slider": {
    "prefix": "slider",
    "body": [
      "${1:tab}:Slider({",
      "  text = \"${2:Text}\",",
      "  var = \"${3:variable}\",",
      "  min = ${4:min},",
      "  max = ${5:max},",
      "  step = ${6:step},",
      "  default = ${7:default},",
      "  valueType = \"${8:valueType}\",",
      "  tooltip = \"${9:Tooltip}\",",
      "})"
    ],
    "description": "Creates a slider"
  },

  "GUI_ELEMENT/SingleDropDown": {
    "prefix": "singleDropDown",
    "body": [
      "${1:tab}:DropDown({",
      "  var = \"${2:variable}\",",
      "  tooltip = \"${3:Tooltip}\",",
      "  options = {",
      "    { label = \"${4:Label}\", value = \"${5:value}\", tooltip = \"${6:Tooltip}\" },",
      "  },",
      "  placeholder = \"${7:Placeholder}\",",
      "  header = \"${8:Header}\",",
      "})"
    ]
  },

  "GUI_ELEMENT/MultiDropDown": {
    "prefix": "multiDropDown",
    "body": [
      "${1:tab}:DropDown({",
      "  var = \"${2:variable}\",",
      "  multi = true,",
      "  tooltip = \"${3:Tooltip}\",",
      "  options = {",
      "    { label = \"${4:Label}\", value = \"${5:value}\", tooltip = \"${6:Tooltip}\" },",
      "  },",
      "  placeholder = \"${7:Placeholder}\",",
      "  header = \"${8:Header}\",",
      "})"
    ]
  },
  "GUI_ELEMENT/StatusFrame-Element": {
		"prefix": [
      "statusframe",
			"status",
		],
		"body": [
			"local ${1:var} = statusFrame:Toggle({",
			"label = '${2:label}:',",
			"var = '${1:var}',",
			"onClick = function()",
			"${4:settings.${1:var} = not settings.${1:var}}",
			"end",
			"})",
		],
		"description": "Create a Status Widget"
	},

}
